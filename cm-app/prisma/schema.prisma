// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  userId   String  @unique
  email    String  @unique
  name     String?
  imageUrl String?

  tests            TypingTest[]
  userAchievements UserAchievement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hostedRoom        Room[]              @relation("RoomHost")
  roomParticipant   RoomParticipant[]
  competitionWins   Competition[]       @relation("CompetitionWinner")
  CompetitionResult CompetitionResult[]
}

model TypingTest {
  id          String @id @default(uuid())
  userId      String
  wpm         Int
  accuracy    Float
  timeLimit   Int
  passageType String

  completedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, completedAt])
}

model Achievement {
  id          String @id @default(uuid())
  title       String @unique
  description String
  icon        String
  category    String
  condition   Json

  createdAt DateTime @default(now())

  userAchievements UserAchievement[]

  @@index([title])
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  progress      Json?

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Room {
  id          String     @id @default(cuid())
  code        String     @unique
  hostId      String
  timeLimit   Int
  passageType String
  passage     String     @db.Text
  status      RoomStatus @default(WAITING)
  maxPlayers  Int        @default(8)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  host         User              @relation("RoomHost", fields: [hostId], references: [id], onDelete: Cascade)
  participants RoomParticipant[]
  competiions  Competition[]

  @@index([code])
  @@index([hostId])
}

model RoomParticipant {
  id       String   @id @default(cuid())
  roomId   String
  userId   String
  joinedAt DateTime @default(now())
  isReady  Boolean  @default(false)

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, userId])
}

model Competition {
  id          String    @id @default(cuid())
  roomId      String
  winnerId    String?
  startedAt   DateTime
  completedAt DateTime?
  passage     String    @db.Text
  timeLimit   Int
  passageType String

  room    Room                @relation(fields: [roomId], references: [id], onDelete: Cascade)
  winner  User?               @relation("CompetitionWinner", fields: [winnerId], references: [id])
  results CompetitionResult[]

  @@index([roomId])
  @@index([startedAt])
}

model CompetitionResult {
  id             String    @id @default(cuid())
  competitionId  String
  userId         String
  wpm            Int
  accuracy       Float
  correctChars   Int
  incorrectChars Int
  totalChars     Int
  completedAt    DateTime?
  position       Int?

  competition Competition @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([competitionId, userId])
}

enum RoomStatus {
  WAITING
  COUNTDOWN
  ACTIVE
  FINISHED
}
